{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.onErrorResumeNext = void 0;\nvar Observable_1 = require(\"../Observable\");\nvar argsOrArgArray_1 = require(\"../util/argsOrArgArray\");\nvar OperatorSubscriber_1 = require(\"../operators/OperatorSubscriber\");\nvar noop_1 = require(\"../util/noop\");\nvar innerFrom_1 = require(\"./innerFrom\");\nfunction onErrorResumeNext() {\n  var sources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n  var nextSources = argsOrArgArray_1.argsOrArgArray(sources);\n  return new Observable_1.Observable(function (subscriber) {\n    var sourceIndex = 0;\n    var subscribeNext = function () {\n      if (sourceIndex < nextSources.length) {\n        var nextSource = void 0;\n        try {\n          nextSource = innerFrom_1.innerFrom(nextSources[sourceIndex++]);\n        } catch (err) {\n          subscribeNext();\n          return;\n        }\n        var innerSubscriber = new OperatorSubscriber_1.OperatorSubscriber(subscriber, undefined, noop_1.noop, noop_1.noop);\n        nextSource.subscribe(innerSubscriber);\n        innerSubscriber.add(subscribeNext);\n      } else {\n        subscriber.complete();\n      }\n    };\n    subscribeNext();\n  });\n}\nexports.onErrorResumeNext = onErrorResumeNext;","map":{"version":3,"names":["Observable_1","require","argsOrArgArray_1","OperatorSubscriber_1","noop_1","innerFrom_1","onErrorResumeNext","sources","_i","arguments","length","nextSources","argsOrArgArray","Observable","subscriber","sourceIndex","subscribeNext","nextSource","innerFrom","err","innerSubscriber","OperatorSubscriber","undefined","noop","subscribe","add","complete","exports"],"sources":["/Users/anil/Documents/GitHub/1appAI/node_modules/rxjs/src/internal/observable/onErrorResumeNext.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInputTuple } from '../types';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { innerFrom } from './innerFrom';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<A extends readonly unknown[]>(sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function onErrorResumeNext<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\n\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits a complete or an error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * ![](onErrorResumeNext.png)\n *\n * `onErrorResumeNext` will subscribe to each observable source it is provided, in order.\n * If the source it's subscribed to emits an error or completes, it will move to the next source\n * without error.\n *\n * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link EMPTY}.\n *\n * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its\n * sources emits an error.\n *\n * Note that there is no way to handle any errors thrown by sources via the result of\n * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can\n * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.\n *\n * ## Example\n *\n * Subscribe to the next Observable after map fails\n *\n * ```ts\n * import { onErrorResumeNext, of, map } from 'rxjs';\n *\n * onErrorResumeNext(\n *   of(1, 2, 3, 0).pipe(\n *     map(x => {\n *       if (x === 0) {\n *         throw Error();\n *       }\n *       return 10 / x;\n *     })\n *   ),\n *   of(1, 2, 3)\n * )\n * .subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(err),     // Will never be called.\n *   complete: () => console.log('done')\n * });\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // 'done'\n * ```\n *\n * @see {@link concat}\n * @see {@link catchError}\n *\n * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.\n * @return {Observable} An Observable that concatenates all sources, one after the other,\n * ignoring all errors, such that any error causes it to move on to the next source.\n */\nexport function onErrorResumeNext<A extends readonly unknown[]>(\n  ...sources: [[...ObservableInputTuple<A>]] | [...ObservableInputTuple<A>]\n): Observable<A[number]> {\n  const nextSources: ObservableInputTuple<A> = argsOrArgArray(sources) as any;\n\n  return new Observable((subscriber) => {\n    let sourceIndex = 0;\n    const subscribeNext = () => {\n      if (sourceIndex < nextSources.length) {\n        let nextSource: Observable<A[number]>;\n        try {\n          nextSource = innerFrom(nextSources[sourceIndex++]);\n        } catch (err) {\n          subscribeNext();\n          return;\n        }\n        const innerSubscriber = new OperatorSubscriber(subscriber, undefined, noop, noop);\n        nextSource.subscribe(innerSubscriber);\n        innerSubscriber.add(subscribeNext);\n      } else {\n        subscriber.complete();\n      }\n    };\n    subscribeNext();\n  });\n}\n"],"mappings":";;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAEA,IAAAC,gBAAA,GAAAD,OAAA;AACA,IAAAE,oBAAA,GAAAF,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AACA,IAAAI,WAAA,GAAAJ,OAAA;AAsEA,SAAgBK,iBAAiBA,CAAA;EAC/B,IAAAC,OAAA;OAAA,IAAAC,EAAA,IAAyE,EAAzEA,EAAA,GAAAC,SAAA,CAAAC,MAAyE,EAAzEF,EAAA,EAAyE;IAAzED,OAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EAEA,IAAMG,WAAW,GAA4BT,gBAAA,CAAAU,cAAc,CAACL,OAAO,CAAQ;EAE3E,OAAO,IAAIP,YAAA,CAAAa,UAAU,CAAC,UAACC,UAAU;IAC/B,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAMC,aAAa,GAAG,SAAAA,CAAA;MACpB,IAAID,WAAW,GAAGJ,WAAW,CAACD,MAAM,EAAE;QACpC,IAAIO,UAAU,SAAuB;QACrC,IAAI;UACFA,UAAU,GAAGZ,WAAA,CAAAa,SAAS,CAACP,WAAW,CAACI,WAAW,EAAE,CAAC,CAAC;SACnD,CAAC,OAAOI,GAAG,EAAE;UACZH,aAAa,EAAE;UACf;;QAEF,IAAMI,eAAe,GAAG,IAAIjB,oBAAA,CAAAkB,kBAAkB,CAACP,UAAU,EAAEQ,SAAS,EAAElB,MAAA,CAAAmB,IAAI,EAAEnB,MAAA,CAAAmB,IAAI,CAAC;QACjFN,UAAU,CAACO,SAAS,CAACJ,eAAe,CAAC;QACrCA,eAAe,CAACK,GAAG,CAACT,aAAa,CAAC;OACnC,MAAM;QACLF,UAAU,CAACY,QAAQ,EAAE;;IAEzB,CAAC;IACDV,aAAa,EAAE;EACjB,CAAC,CAAC;AACJ;AAzBAW,OAAA,CAAArB,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}