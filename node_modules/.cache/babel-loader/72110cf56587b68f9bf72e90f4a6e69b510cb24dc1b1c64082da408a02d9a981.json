{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Action = void 0;\nvar Subscription_1 = require(\"../Subscription\");\nvar Action = function (_super) {\n  __extends(Action, _super);\n  function Action(scheduler, work) {\n    return _super.call(this) || this;\n  }\n  Action.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    return this;\n  };\n  return Action;\n}(Subscription_1.Subscription);\nexports.Action = Action;","map":{"version":3,"names":["Subscription_1","require","Action","_super","__extends","scheduler","work","call","prototype","schedule","state","delay","Subscription","exports"],"sources":["/Users/anil/Documents/GitHub/armada-ai/node_modules/rxjs/src/internal/scheduler/Action.ts"],"sourcesContent":["import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAAA,cAAA,GAAAC,OAAA;AAiBA,IAAAC,MAAA,aAAAC,MAAA;EAA+BC,SAAA,CAAAF,MAAA,EAAAC,MAAA;EAC7B,SAAAD,OAAYG,SAAoB,EAAEC,IAAmD;WACnFH,MAAA,CAAAI,IAAA,MAAO;EACT;EAWOL,MAAA,CAAAM,SAAA,CAAAC,QAAQ,GAAf,UAAgBC,KAAS,EAAEC,KAAiB;IAAjB,IAAAA,KAAA;MAAAA,KAAA,IAAiB;IAAA;IAC1C,OAAO,IAAI;EACb,CAAC;EACH,OAAAT,MAAC;AAAD,CAAC,CAjB8BF,cAAA,CAAAY,YAAY;AAA9BC,OAAA,CAAAX,MAAA,GAAAA,MAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}