{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectableObservable = void 0;\nvar Observable_1 = require(\"../Observable\");\nvar Subscription_1 = require(\"../Subscription\");\nvar refCount_1 = require(\"../operators/refCount\");\nvar OperatorSubscriber_1 = require(\"../operators/OperatorSubscriber\");\nvar lift_1 = require(\"../util/lift\");\nvar ConnectableObservable = function (_super) {\n  __extends(ConnectableObservable, _super);\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._subject = null;\n    _this._refCount = 0;\n    _this._connection = null;\n    if (lift_1.hasLift(source)) {\n      _this.lift = source.lift;\n    }\n    return _this;\n  }\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  };\n  ConnectableObservable.prototype._teardown = function () {\n    this._refCount = 0;\n    var _connection = this._connection;\n    this._subject = this._connection = null;\n    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n  };\n  ConnectableObservable.prototype.connect = function () {\n    var _this = this;\n    var connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription_1.Subscription();\n      var subject_1 = this.getSubject();\n      connection.add(this.source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subject_1, undefined, function () {\n        _this._teardown();\n        subject_1.complete();\n      }, function (err) {\n        _this._teardown();\n        subject_1.error(err);\n      }, function () {\n        return _this._teardown();\n      })));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription_1.Subscription.EMPTY;\n      }\n    }\n    return connection;\n  };\n  ConnectableObservable.prototype.refCount = function () {\n    return refCount_1.refCount()(this);\n  };\n  return ConnectableObservable;\n}(Observable_1.Observable);\nexports.ConnectableObservable = ConnectableObservable;","map":{"version":3,"names":["Observable_1","require","Subscription_1","refCount_1","OperatorSubscriber_1","lift_1","ConnectableObservable","_super","__extends","source","subjectFactory","_this","call","_subject","_refCount","_connection","hasLift","lift","prototype","_subscribe","subscriber","getSubject","subscribe","subject","isStopped","_teardown","unsubscribe","connect","connection","Subscription","subject_1","add","createOperatorSubscriber","undefined","complete","err","error","closed","EMPTY","refCount","Observable","exports"],"sources":["/Users/anil/Documents/GitHub/1appAI/node_modules/rxjs/src/internal/observable/ConnectableObservable.ts"],"sourcesContent":["import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\n/**\n * @class ConnectableObservable<T>\n * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n * If you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\n * instead.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n  protected _subject: Subject<T> | null = null;\n  protected _refCount: number = 0;\n  protected _connection: Subscription | null = null;\n\n  /**\n   * @param source The source observable\n   * @param subjectFactory The factory that creates the subject used internally.\n   * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n   * `new ConnectableObservable(source, factory)` is equivalent to\n   * `connectable(source, { connector: factory })`.\n   * When the `refCount()` method is needed, the {@link share} operator should be used instead:\n   * `new ConnectableObservable(source, factory).refCount()` is equivalent to\n   * `source.pipe(share({ connector: factory }))`.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  constructor(public source: Observable<T>, protected subjectFactory: () => Subject<T>) {\n    super();\n    // If we have lift, monkey patch that here. This is done so custom observable\n    // types will compose through multicast. Otherwise the resulting observable would\n    // simply be an instance of `ConnectableObservable`.\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject!;\n  }\n\n  protected _teardown() {\n    this._refCount = 0;\n    const { _connection } = this;\n    this._subject = this._connection = null;\n    _connection?.unsubscribe();\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(\n        this.source.subscribe(\n          createOperatorSubscriber(\n            subject as any,\n            undefined,\n            () => {\n              this._teardown();\n              subject.complete();\n            },\n            (err) => {\n              this._teardown();\n              subject.error(err);\n            },\n            () => this._teardown()\n          )\n        )\n      );\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}