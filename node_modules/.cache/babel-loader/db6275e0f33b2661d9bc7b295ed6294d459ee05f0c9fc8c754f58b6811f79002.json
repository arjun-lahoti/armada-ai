{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zipWith = void 0;\nvar zip_1 = require(\"./zip\");\nfunction zipWith() {\n  var otherInputs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherInputs[_i] = arguments[_i];\n  }\n  return zip_1.zip.apply(void 0, __spreadArray([], __read(otherInputs)));\n}\nexports.zipWith = zipWith;","map":{"version":3,"names":["zip_1","require","zipWith","otherInputs","_i","arguments","length","zip","apply","__spreadArray","__read","exports"],"sources":["/Users/anil/Documents/GitHub/1appAI/node_modules/rxjs/src/internal/operators/zipWith.ts"],"sourcesContent":["import { ObservableInputTuple, OperatorFunction, Cons } from '../types';\nimport { zip } from './zip';\n\n/**\n * Subscribes to the source, and the observable inputs provided as arguments, and combines their values, by index, into arrays.\n *\n * What is meant by \"combine by index\": The first value from each will be made into a single array, then emitted,\n * then the second value from each will be combined into a single array and emitted, then the third value\n * from each will be combined into a single array and emitted, and so on.\n *\n * This will continue until it is no longer able to combine values of the same index into an array.\n *\n * After the last value from any one completed source is emitted in an array, the resulting observable will complete,\n * as there is no way to continue \"zipping\" values together by index.\n *\n * Use-cases for this operator are limited. There are memory concerns if one of the streams is emitting\n * values at a much faster rate than the others. Usage should likely be limited to streams that emit\n * at a similar pace, or finite streams of known length.\n *\n * In many cases, authors want `combineLatestWith` and not `zipWith`.\n *\n * @param otherInputs other observable inputs to collate values from.\n * @return A function that returns an Observable that emits items by index\n * combined from the source Observable and provided Observables, in form of an\n * array.\n */\nexport function zipWith<T, A extends readonly unknown[]>(...otherInputs: [...ObservableInputTuple<A>]): OperatorFunction<T, Cons<T, A>> {\n  return zip(...otherInputs);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAAA,KAAA,GAAAC,OAAA;AAyBA,SAAgBC,OAAOA,CAAA;EAAkC,IAAAC,WAAA;OAAA,IAAAC,EAAA,IAA4C,EAA5CA,EAAA,GAAAC,SAAA,CAAAC,MAA4C,EAA5CF,EAAA,EAA4C;IAA5CD,WAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EACvD,OAAOJ,KAAA,CAAAO,GAAG,CAAAC,KAAA,SAAAC,aAAA,KAAAC,MAAA,CAAIP,WAAW;AAC3B;AAFAQ,OAAA,CAAAT,OAAA,GAAAA,OAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}