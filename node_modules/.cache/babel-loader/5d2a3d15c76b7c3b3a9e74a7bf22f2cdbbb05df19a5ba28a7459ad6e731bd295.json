{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bufferToggle = void 0;\nvar Subscription_1 = require(\"../Subscription\");\nvar lift_1 = require(\"../util/lift\");\nvar innerFrom_1 = require(\"../observable/innerFrom\");\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\nvar noop_1 = require(\"../util/noop\");\nvar arrRemove_1 = require(\"../util/arrRemove\");\nfunction bufferToggle(openings, closingSelector) {\n  return lift_1.operate(function (source, subscriber) {\n    var buffers = [];\n    innerFrom_1.innerFrom(openings).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (openValue) {\n      var buffer = [];\n      buffers.push(buffer);\n      var closingSubscription = new Subscription_1.Subscription();\n      var emitBuffer = function () {\n        arrRemove_1.arrRemove(buffers, buffer);\n        subscriber.next(buffer);\n        closingSubscription.unsubscribe();\n      };\n      closingSubscription.add(innerFrom_1.innerFrom(closingSelector(openValue)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, emitBuffer, noop_1.noop)));\n    }, noop_1.noop));\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n      try {\n        for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {\n          var buffer = buffers_1_1.value;\n          buffer.push(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }, function () {\n      while (buffers.length > 0) {\n        subscriber.next(buffers.shift());\n      }\n      subscriber.complete();\n    }));\n  });\n}\nexports.bufferToggle = bufferToggle;","map":{"version":3,"names":["Subscription_1","require","lift_1","innerFrom_1","OperatorSubscriber_1","noop_1","arrRemove_1","bufferToggle","openings","closingSelector","operate","source","subscriber","buffers","innerFrom","subscribe","createOperatorSubscriber","openValue","buffer","push","closingSubscription","Subscription","emitBuffer","arrRemove","next","unsubscribe","add","noop","value","buffers_1","__values","buffers_1_1","done","length","shift","complete","exports"],"sources":["/Users/anil/Documents/GitHub/armada-ai/node_modules/rxjs/src/internal/operators/bufferToggle.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\nimport { OperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * ![](bufferToggle.png)\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```ts\n * import { fromEvent, interval, bufferToggle, EMPTY } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const buffered = clicks.pipe(bufferToggle(openings, i =>\n *   i % 2 ? interval(500) : EMPTY\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return A function that returns an Observable of arrays of buffered values.\n */\nexport function bufferToggle<T, O>(\n  openings: ObservableInput<O>,\n  closingSelector: (value: O) => ObservableInput<any>\n): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    const buffers: T[][] = [];\n\n    // Subscribe to the openings notifier first\n    innerFrom(openings).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (openValue) => {\n          const buffer: T[] = [];\n          buffers.push(buffer);\n          // We use this composite subscription, so that\n          // when the closing notifier emits, we can tear it down.\n          const closingSubscription = new Subscription();\n\n          const emitBuffer = () => {\n            arrRemove(buffers, buffer);\n            subscriber.next(buffer);\n            closingSubscription.unsubscribe();\n          };\n\n          // The line below will add the subscription to the parent subscriber *and* the closing subscription.\n          closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(createOperatorSubscriber(subscriber, emitBuffer, noop)));\n        },\n        noop\n      )\n    );\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Value from our source. Add it to all pending buffers.\n          for (const buffer of buffers) {\n            buffer.push(value);\n          }\n        },\n        () => {\n          // Source complete. Emit all pending buffers.\n          while (buffers.length > 0) {\n            subscriber.next(buffers.shift()!);\n          }\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,cAAA,GAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,WAAA,GAAAF,OAAA;AACA,IAAAG,oBAAA,GAAAH,OAAA;AACA,IAAAI,MAAA,GAAAJ,OAAA;AACA,IAAAK,WAAA,GAAAL,OAAA;AA6CA,SAAgBM,YAAYA,CAC1BC,QAA4B,EAC5BC,eAAmD;EAEnD,OAAOP,MAAA,CAAAQ,OAAO,CAAC,UAACC,MAAM,EAAEC,UAAU;IAChC,IAAMC,OAAO,GAAU,EAAE;IAGzBV,WAAA,CAAAW,SAAS,CAACN,QAAQ,CAAC,CAACO,SAAS,CAC3BX,oBAAA,CAAAY,wBAAwB,CACtBJ,UAAU,EACV,UAACK,SAAS;MACR,IAAMC,MAAM,GAAQ,EAAE;MACtBL,OAAO,CAACM,IAAI,CAACD,MAAM,CAAC;MAGpB,IAAME,mBAAmB,GAAG,IAAIpB,cAAA,CAAAqB,YAAY,EAAE;MAE9C,IAAMC,UAAU,GAAG,SAAAA,CAAA;QACjBhB,WAAA,CAAAiB,SAAS,CAACV,OAAO,EAAEK,MAAM,CAAC;QAC1BN,UAAU,CAACY,IAAI,CAACN,MAAM,CAAC;QACvBE,mBAAmB,CAACK,WAAW,EAAE;MACnC,CAAC;MAGDL,mBAAmB,CAACM,GAAG,CAACvB,WAAA,CAAAW,SAAS,CAACL,eAAe,CAACQ,SAAS,CAAC,CAAC,CAACF,SAAS,CAACX,oBAAA,CAAAY,wBAAwB,CAACJ,UAAU,EAAEU,UAAU,EAAEjB,MAAA,CAAAsB,IAAI,CAAC,CAAC,CAAC;IAClI,CAAC,EACDtB,MAAA,CAAAsB,IAAI,CACL,CACF;IAEDhB,MAAM,CAACI,SAAS,CACdX,oBAAA,CAAAY,wBAAwB,CACtBJ,UAAU,EACV,UAACgB,KAAK;;;QAEJ,KAAqB,IAAAC,SAAA,GAAAC,QAAA,CAAAjB,OAAO,GAAAkB,WAAA,GAAAF,SAAA,CAAAL,IAAA,KAAAO,WAAA,CAAAC,IAAA,EAAAD,WAAA,GAAAF,SAAA,CAAAL,IAAA,IAAE;UAAzB,IAAMN,MAAM,GAAAa,WAAA,CAAAH,KAAA;UACfV,MAAM,CAACC,IAAI,CAACS,KAAK,CAAC;;;;;;;;;;;;;IAEtB,CAAC,EACD;MAEE,OAAOf,OAAO,CAACoB,MAAM,GAAG,CAAC,EAAE;QACzBrB,UAAU,CAACY,IAAI,CAACX,OAAO,CAACqB,KAAK,EAAG,CAAC;;MAEnCtB,UAAU,CAACuB,QAAQ,EAAE;IACvB,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ;AAlDAC,OAAA,CAAA7B,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}