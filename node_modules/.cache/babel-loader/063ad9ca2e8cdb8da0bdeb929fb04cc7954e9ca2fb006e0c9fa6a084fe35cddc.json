{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.window = void 0;\nvar Subject_1 = require(\"../Subject\");\nvar lift_1 = require(\"../util/lift\");\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\nvar noop_1 = require(\"../util/noop\");\nvar innerFrom_1 = require(\"../observable/innerFrom\");\nfunction window(windowBoundaries) {\n  return lift_1.operate(function (source, subscriber) {\n    var windowSubject = new Subject_1.Subject();\n    subscriber.next(windowSubject.asObservable());\n    var errorHandler = function (err) {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value);\n    }, function () {\n      windowSubject.complete();\n      subscriber.complete();\n    }, errorHandler));\n    innerFrom_1.innerFrom(windowBoundaries).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {\n      windowSubject.complete();\n      subscriber.next(windowSubject = new Subject_1.Subject());\n    }, noop_1.noop, errorHandler));\n    return function () {\n      windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();\n      windowSubject = null;\n    };\n  });\n}\nexports.window = window;","map":{"version":3,"names":["Subject_1","require","lift_1","OperatorSubscriber_1","noop_1","innerFrom_1","window","windowBoundaries","operate","source","subscriber","windowSubject","Subject","next","asObservable","errorHandler","err","error","subscribe","createOperatorSubscriber","value","complete","innerFrom","noop","unsubscribe","exports"],"sources":["/Users/anil/Documents/GitHub/armada-ai/node_modules/rxjs/src/internal/operators/window.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { OperatorFunction, ObservableInput } from '../types';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * `windowBoundaries` emits an item. `windowBoundaries` can be any type that\n * `ObservableInput` accepts. It internally gets converted to an Observable.\n * Because each window is an Observable, the output is a higher-order Observable.\n *\n * ## Example\n *\n * In every window of 1 second each, emit at most 2 click events\n *\n * ```ts\n * import { fromEvent, interval, window, map, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const sec = interval(1000);\n * const result = clicks.pipe(\n *   window(sec),\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param windowBoundaries An `ObservableInput` that completes the\n * previous window and starts a new window.\n * @return A function that returns an Observable of windows, which are\n * Observables emitting values of the source Observable.\n */\nexport function window<T>(windowBoundaries: ObservableInput<any>): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    let windowSubject: Subject<T> = new Subject<T>();\n\n    subscriber.next(windowSubject.asObservable());\n\n    const errorHandler = (err: any) => {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n\n    // Subscribe to our source\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => windowSubject?.next(value),\n        () => {\n          windowSubject.complete();\n          subscriber.complete();\n        },\n        errorHandler\n      )\n    );\n\n    // Subscribe to the window boundaries.\n    innerFrom(windowBoundaries).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        () => {\n          windowSubject.complete();\n          subscriber.next((windowSubject = new Subject()));\n        },\n        noop,\n        errorHandler\n      )\n    );\n\n    return () => {\n      // Unsubscribing the subject ensures that anyone who has captured\n      // a reference to this window that tries to use it after it can\n      // no longer get values from the source will get an ObjectUnsubscribedError.\n      windowSubject?.unsubscribe();\n      windowSubject = null!;\n    };\n  });\n}\n"],"mappings":";;;;;;AAEA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,oBAAA,GAAAF,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AACA,IAAAI,WAAA,GAAAJ,OAAA;AA8CA,SAAgBK,MAAMA,CAAIC,gBAAsC;EAC9D,OAAOL,MAAA,CAAAM,OAAO,CAAC,UAACC,MAAM,EAAEC,UAAU;IAChC,IAAIC,aAAa,GAAe,IAAIX,SAAA,CAAAY,OAAO,EAAK;IAEhDF,UAAU,CAACG,IAAI,CAACF,aAAa,CAACG,YAAY,EAAE,CAAC;IAE7C,IAAMC,YAAY,GAAG,SAAAA,CAACC,GAAQ;MAC5BL,aAAa,CAACM,KAAK,CAACD,GAAG,CAAC;MACxBN,UAAU,CAACO,KAAK,CAACD,GAAG,CAAC;IACvB,CAAC;IAGDP,MAAM,CAACS,SAAS,CACdf,oBAAA,CAAAgB,wBAAwB,CACtBT,UAAU,EACV,UAACU,KAAK;MAAK,OAAAT,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEE,IAAI,CAACO,KAAK,CAAC;IAA1B,CAA0B,EACrC;MACET,aAAa,CAACU,QAAQ,EAAE;MACxBX,UAAU,CAACW,QAAQ,EAAE;IACvB,CAAC,EACDN,YAAY,CACb,CACF;IAGDV,WAAA,CAAAiB,SAAS,CAACf,gBAAgB,CAAC,CAACW,SAAS,CACnCf,oBAAA,CAAAgB,wBAAwB,CACtBT,UAAU,EACV;MACEC,aAAa,CAACU,QAAQ,EAAE;MACxBX,UAAU,CAACG,IAAI,CAAEF,aAAa,GAAG,IAAIX,SAAA,CAAAY,OAAO,EAAG,CAAC;IAClD,CAAC,EACDR,MAAA,CAAAmB,IAAI,EACJR,YAAY,CACb,CACF;IAED,OAAO;MAILJ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEa,WAAW,EAAE;MAC5Bb,aAAa,GAAG,IAAK;IACvB,CAAC;EACH,CAAC,CAAC;AACJ;AA7CAc,OAAA,CAAAnB,MAAA,GAAAA,MAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}