{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.windowToggle = void 0;\nvar Subject_1 = require(\"../Subject\");\nvar Subscription_1 = require(\"../Subscription\");\nvar lift_1 = require(\"../util/lift\");\nvar innerFrom_1 = require(\"../observable/innerFrom\");\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\nvar noop_1 = require(\"../util/noop\");\nvar arrRemove_1 = require(\"../util/arrRemove\");\nfunction windowToggle(openings, closingSelector) {\n  return lift_1.operate(function (source, subscriber) {\n    var windows = [];\n    var handleError = function (err) {\n      while (0 < windows.length) {\n        windows.shift().error(err);\n      }\n      subscriber.error(err);\n    };\n    innerFrom_1.innerFrom(openings).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (openValue) {\n      var window = new Subject_1.Subject();\n      windows.push(window);\n      var closingSubscription = new Subscription_1.Subscription();\n      var closeWindow = function () {\n        arrRemove_1.arrRemove(windows, window);\n        window.complete();\n        closingSubscription.unsubscribe();\n      };\n      var closingNotifier;\n      try {\n        closingNotifier = innerFrom_1.innerFrom(closingSelector(openValue));\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n      subscriber.next(window.asObservable());\n      closingSubscription.add(closingNotifier.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, closeWindow, noop_1.noop, handleError)));\n    }, noop_1.noop));\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n      var windowsCopy = windows.slice();\n      try {\n        for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {\n          var window_1 = windowsCopy_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }, function () {\n      while (0 < windows.length) {\n        windows.shift().complete();\n      }\n      subscriber.complete();\n    }, handleError, function () {\n      while (0 < windows.length) {\n        windows.shift().unsubscribe();\n      }\n    }));\n  });\n}\nexports.windowToggle = windowToggle;","map":{"version":3,"names":["Subject_1","require","Subscription_1","lift_1","innerFrom_1","OperatorSubscriber_1","noop_1","arrRemove_1","windowToggle","openings","closingSelector","operate","source","subscriber","windows","handleError","err","length","shift","error","innerFrom","subscribe","createOperatorSubscriber","openValue","window","Subject","push","closingSubscription","Subscription","closeWindow","arrRemove","complete","unsubscribe","closingNotifier","next","asObservable","add","noop","value","windowsCopy","slice","windowsCopy_1","__values","windowsCopy_1_1","done","window_1","exports"],"sources":["/Users/anil/Documents/GitHub/armada-ai/node_modules/rxjs/src/internal/operators/windowToggle.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```ts\n * import { fromEvent, interval, windowToggle, EMPTY, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\n *   mergeAll()\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits a next notification, signals that the\n * associated window should complete.\n * @return A function that returns an Observable of windows, which in turn are\n * Observables.\n */\nexport function windowToggle<T, O>(\n  openings: ObservableInput<O>,\n  closingSelector: (openValue: O) => ObservableInput<any>\n): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    const windows: Subject<T>[] = [];\n\n    const handleError = (err: any) => {\n      while (0 < windows.length) {\n        windows.shift()!.error(err);\n      }\n      subscriber.error(err);\n    };\n\n    innerFrom(openings).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (openValue) => {\n          const window = new Subject<T>();\n          windows.push(window);\n          const closingSubscription = new Subscription();\n          const closeWindow = () => {\n            arrRemove(windows, window);\n            window.complete();\n            closingSubscription.unsubscribe();\n          };\n\n          let closingNotifier: Observable<any>;\n          try {\n            closingNotifier = innerFrom(closingSelector(openValue));\n          } catch (err) {\n            handleError(err);\n            return;\n          }\n\n          subscriber.next(window.asObservable());\n\n          closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n        },\n        noop\n      )\n    );\n\n    // Subscribe to the source to get things started.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Copy the windows array before we emit to\n          // make sure we don't have issues with reentrant code.\n          const windowsCopy = windows.slice();\n          for (const window of windowsCopy) {\n            window.next(value);\n          }\n        },\n        () => {\n          // Complete all of our windows before we complete.\n          while (0 < windows.length) {\n            windows.shift()!.complete();\n          }\n          subscriber.complete();\n        },\n        handleError,\n        () => {\n          // Add this finalization so that all window subjects are\n          // disposed of. This way, if a user tries to subscribe\n          // to a window *after* the outer subscription has been unsubscribed,\n          // they will get an error, instead of waiting forever to\n          // see if a value arrives.\n          while (0 < windows.length) {\n            windows.shift()!.unsubscribe();\n          }\n        }\n      )\n    );\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}