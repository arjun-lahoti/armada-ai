{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.captureError = exports.errorContext = void 0;\nvar config_1 = require(\"../config\");\nvar context = null;\nfunction errorContext(cb) {\n  if (config_1.config.useDeprecatedSynchronousErrorHandling) {\n    var isRoot = !context;\n    if (isRoot) {\n      context = {\n        errorThrown: false,\n        error: null\n      };\n    }\n    cb();\n    if (isRoot) {\n      var _a = context,\n        errorThrown = _a.errorThrown,\n        error = _a.error;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    cb();\n  }\n}\nexports.errorContext = errorContext;\nfunction captureError(err) {\n  if (config_1.config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\nexports.captureError = captureError;","map":{"version":3,"names":["config_1","require","context","errorContext","cb","config","useDeprecatedSynchronousErrorHandling","isRoot","errorThrown","error","_a","exports","captureError","err"],"sources":["/Users/anil/Documents/GitHub/armada-ai/node_modules/rxjs/src/internal/util/errorContext.ts"],"sourcesContent":["import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AAEA,IAAIC,OAAO,GAAgD,IAAI;AAS/D,SAAgBC,YAAYA,CAACC,EAAc;EACzC,IAAIJ,QAAA,CAAAK,MAAM,CAACC,qCAAqC,EAAE;IAChD,IAAMC,MAAM,GAAG,CAACL,OAAO;IACvB,IAAIK,MAAM,EAAE;MACVL,OAAO,GAAG;QAAEM,WAAW,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAI,CAAE;;IAE/CL,EAAE,EAAE;IACJ,IAAIG,MAAM,EAAE;MACJ,IAAAG,EAAA,GAAyBR,OAAQ;QAA/BM,WAAW,GAAAE,EAAA,CAAAF,WAAA;QAAEC,KAAK,GAAAC,EAAA,CAAAD,KAAa;MACvCP,OAAO,GAAG,IAAI;MACd,IAAIM,WAAW,EAAE;QACf,MAAMC,KAAK;;;GAGhB,MAAM;IAGLL,EAAE,EAAE;;AAER;AAnBAO,OAAA,CAAAR,YAAA,GAAAA,YAAA;AAyBA,SAAgBS,YAAYA,CAACC,GAAQ;EACnC,IAAIb,QAAA,CAAAK,MAAM,CAACC,qCAAqC,IAAIJ,OAAO,EAAE;IAC3DA,OAAO,CAACM,WAAW,GAAG,IAAI;IAC1BN,OAAO,CAACO,KAAK,GAAGI,GAAG;;AAEvB;AALAF,OAAA,CAAAC,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}