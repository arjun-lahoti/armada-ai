{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.windowCount = void 0;\nvar Subject_1 = require(\"../Subject\");\nvar lift_1 = require(\"../util/lift\");\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\nfunction windowCount(windowSize, startWindowEvery) {\n  if (startWindowEvery === void 0) {\n    startWindowEvery = 0;\n  }\n  var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n  return lift_1.operate(function (source, subscriber) {\n    var windows = [new Subject_1.Subject()];\n    var starts = [];\n    var count = 0;\n    subscriber.next(windows[0].asObservable());\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n      try {\n        for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {\n          var window_1 = windows_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      var c = count - windowSize + 1;\n      if (c >= 0 && c % startEvery === 0) {\n        windows.shift().complete();\n      }\n      if (++count % startEvery === 0) {\n        var window_2 = new Subject_1.Subject();\n        windows.push(window_2);\n        subscriber.next(window_2.asObservable());\n      }\n    }, function () {\n      while (windows.length > 0) {\n        windows.shift().complete();\n      }\n      subscriber.complete();\n    }, function (err) {\n      while (windows.length > 0) {\n        windows.shift().error(err);\n      }\n      subscriber.error(err);\n    }, function () {\n      starts = null;\n      windows = null;\n    }));\n  });\n}\nexports.windowCount = windowCount;","map":{"version":3,"names":["Subject_1","require","lift_1","OperatorSubscriber_1","windowCount","windowSize","startWindowEvery","startEvery","operate","source","subscriber","windows","Subject","starts","count","next","asObservable","subscribe","createOperatorSubscriber","value","windows_1","__values","windows_1_1","done","window_1","c","shift","complete","window_2","push","length","err","error","exports"],"sources":["/Users/anil/Documents/GitHub/1appAI/node_modules/rxjs/src/internal/operators/windowCount.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowCount.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * ## Examples\n *\n * Ignore every 3rd click event, starting from the first one\n *\n * ```ts\n * import { fromEvent, windowCount, map, skip, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(3),\n *   map(win => win.pipe(skip(1))), // skip first of every 3 clicks\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Ignore every 3rd click event, starting from the third one\n *\n * ```ts\n * import { fromEvent, windowCount, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(2, 3),\n *   mergeAll() // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return A function that returns an Observable of windows, which in turn are\n * Observable of values.\n */\nexport function windowCount<T>(windowSize: number, startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  const startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n\n  return operate((source, subscriber) => {\n    let windows = [new Subject<T>()];\n    let starts: number[] = [];\n    let count = 0;\n\n    // Open the first window.\n    subscriber.next(windows[0].asObservable());\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Emit the value through all current windows.\n          // We don't need to create a new window yet, we\n          // do that as soon as we close one.\n          for (const window of windows) {\n            window.next(value);\n          }\n          // Here we're using the size of the window array to figure\n          // out if the oldest window has emitted enough values. We can do this\n          // because the size of the window array is a function of the values\n          // seen by the subscription. If it's time to close it, we complete\n          // it and remove it.\n          const c = count - windowSize + 1;\n          if (c >= 0 && c % startEvery === 0) {\n            windows.shift()!.complete();\n          }\n\n          // Look to see if the next count tells us it's time to open a new window.\n          // TODO: We need to figure out if this really makes sense. We're technically\n          // emitting windows *before* we have a value to emit them for. It's probably\n          // more expected that we should be emitting the window when the start\n          // count is reached -- not before.\n          if (++count % startEvery === 0) {\n            const window = new Subject<T>();\n            windows.push(window);\n            subscriber.next(window.asObservable());\n          }\n        },\n        () => {\n          while (windows.length > 0) {\n            windows.shift()!.complete();\n          }\n          subscriber.complete();\n        },\n        (err) => {\n          while (windows.length > 0) {\n            windows.shift()!.error(err);\n          }\n          subscriber.error(err);\n        },\n        () => {\n          starts = null!;\n          windows = null!;\n        }\n      )\n    );\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,IAAAA,SAAA,GAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,oBAAA,GAAAF,OAAA;AAgEA,SAAgBG,WAAWA,CAAIC,UAAkB,EAAEC,gBAA4B;EAA5B,IAAAA,gBAAA;IAAAA,gBAAA,IAA4B;EAAA;EAC7E,IAAMC,UAAU,GAAGD,gBAAgB,GAAG,CAAC,GAAGA,gBAAgB,GAAGD,UAAU;EAEvE,OAAOH,MAAA,CAAAM,OAAO,CAAC,UAACC,MAAM,EAAEC,UAAU;IAChC,IAAIC,OAAO,GAAG,CAAC,IAAIX,SAAA,CAAAY,OAAO,EAAK,CAAC;IAChC,IAAIC,MAAM,GAAa,EAAE;IACzB,IAAIC,KAAK,GAAG,CAAC;IAGbJ,UAAU,CAACK,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC,CAACK,YAAY,EAAE,CAAC;IAE1CP,MAAM,CAACQ,SAAS,CACdd,oBAAA,CAAAe,wBAAwB,CACtBR,UAAU,EACV,UAACS,KAAQ;;;QAIP,KAAqB,IAAAC,SAAA,GAAAC,QAAA,CAAAV,OAAO,GAAAW,WAAA,GAAAF,SAAA,CAAAL,IAAA,KAAAO,WAAA,CAAAC,IAAA,EAAAD,WAAA,GAAAF,SAAA,CAAAL,IAAA,IAAE;UAAzB,IAAMS,QAAM,GAAAF,WAAA,CAAAH,KAAA;UACfK,QAAM,CAACT,IAAI,CAACI,KAAK,CAAC;;;;;;;;;;;;;MAOpB,IAAMM,CAAC,GAAGX,KAAK,GAAGT,UAAU,GAAG,CAAC;MAChC,IAAIoB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGlB,UAAU,KAAK,CAAC,EAAE;QAClCI,OAAO,CAACe,KAAK,EAAG,CAACC,QAAQ,EAAE;;MAQ7B,IAAI,EAAEb,KAAK,GAAGP,UAAU,KAAK,CAAC,EAAE;QAC9B,IAAMqB,QAAM,GAAG,IAAI5B,SAAA,CAAAY,OAAO,EAAK;QAC/BD,OAAO,CAACkB,IAAI,CAACD,QAAM,CAAC;QACpBlB,UAAU,CAACK,IAAI,CAACa,QAAM,CAACZ,YAAY,EAAE,CAAC;;IAE1C,CAAC,EACD;MACE,OAAOL,OAAO,CAACmB,MAAM,GAAG,CAAC,EAAE;QACzBnB,OAAO,CAACe,KAAK,EAAG,CAACC,QAAQ,EAAE;;MAE7BjB,UAAU,CAACiB,QAAQ,EAAE;IACvB,CAAC,EACD,UAACI,GAAG;MACF,OAAOpB,OAAO,CAACmB,MAAM,GAAG,CAAC,EAAE;QACzBnB,OAAO,CAACe,KAAK,EAAG,CAACM,KAAK,CAACD,GAAG,CAAC;;MAE7BrB,UAAU,CAACsB,KAAK,CAACD,GAAG,CAAC;IACvB,CAAC,EACD;MACElB,MAAM,GAAG,IAAK;MACdF,OAAO,GAAG,IAAK;IACjB,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ;AA7DAsB,OAAA,CAAA7B,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}