{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scheduled = void 0;\nvar scheduleObservable_1 = require(\"./scheduleObservable\");\nvar schedulePromise_1 = require(\"./schedulePromise\");\nvar scheduleArray_1 = require(\"./scheduleArray\");\nvar scheduleIterable_1 = require(\"./scheduleIterable\");\nvar scheduleAsyncIterable_1 = require(\"./scheduleAsyncIterable\");\nvar isInteropObservable_1 = require(\"../util/isInteropObservable\");\nvar isPromise_1 = require(\"../util/isPromise\");\nvar isArrayLike_1 = require(\"../util/isArrayLike\");\nvar isIterable_1 = require(\"../util/isIterable\");\nvar isAsyncIterable_1 = require(\"../util/isAsyncIterable\");\nvar throwUnobservableError_1 = require(\"../util/throwUnobservableError\");\nvar isReadableStreamLike_1 = require(\"../util/isReadableStreamLike\");\nvar scheduleReadableStreamLike_1 = require(\"./scheduleReadableStreamLike\");\nfunction scheduled(input, scheduler) {\n  if (input != null) {\n    if (isInteropObservable_1.isInteropObservable(input)) {\n      return scheduleObservable_1.scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike_1.isArrayLike(input)) {\n      return scheduleArray_1.scheduleArray(input, scheduler);\n    }\n    if (isPromise_1.isPromise(input)) {\n      return schedulePromise_1.schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable_1.isAsyncIterable(input)) {\n      return scheduleAsyncIterable_1.scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable_1.isIterable(input)) {\n      return scheduleIterable_1.scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike_1.isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike_1.scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw throwUnobservableError_1.createInvalidObservableTypeError(input);\n}\nexports.scheduled = scheduled;","map":{"version":3,"names":["scheduleObservable_1","require","schedulePromise_1","scheduleArray_1","scheduleIterable_1","scheduleAsyncIterable_1","isInteropObservable_1","isPromise_1","isArrayLike_1","isIterable_1","isAsyncIterable_1","throwUnobservableError_1","isReadableStreamLike_1","scheduleReadableStreamLike_1","scheduled","input","scheduler","isInteropObservable","scheduleObservable","isArrayLike","scheduleArray","isPromise","schedulePromise","isAsyncIterable","scheduleAsyncIterable","isIterable","scheduleIterable","isReadableStreamLike","scheduleReadableStreamLike","createInvalidObservableTypeError","exports"],"sources":["/Users/anil/Documents/GitHub/armada-ai/node_modules/rxjs/src/internal/scheduled/scheduled.ts"],"sourcesContent":["import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n"],"mappings":";;;;;;AAAA,IAAAA,oBAAA,GAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AACA,IAAAE,eAAA,GAAAF,OAAA;AACA,IAAAG,kBAAA,GAAAH,OAAA;AACA,IAAAI,uBAAA,GAAAJ,OAAA;AACA,IAAAK,qBAAA,GAAAL,OAAA;AACA,IAAAM,WAAA,GAAAN,OAAA;AACA,IAAAO,aAAA,GAAAP,OAAA;AACA,IAAAQ,YAAA,GAAAR,OAAA;AAGA,IAAAS,iBAAA,GAAAT,OAAA;AACA,IAAAU,wBAAA,GAAAV,OAAA;AACA,IAAAW,sBAAA,GAAAX,OAAA;AACA,IAAAY,4BAAA,GAAAZ,OAAA;AAaA,SAAgBa,SAASA,CAAIC,KAAyB,EAAEC,SAAwB;EAC9E,IAAID,KAAK,IAAI,IAAI,EAAE;IACjB,IAAIT,qBAAA,CAAAW,mBAAmB,CAACF,KAAK,CAAC,EAAE;MAC9B,OAAOf,oBAAA,CAAAkB,kBAAkB,CAACH,KAAK,EAAEC,SAAS,CAAC;;IAE7C,IAAIR,aAAA,CAAAW,WAAW,CAACJ,KAAK,CAAC,EAAE;MACtB,OAAOZ,eAAA,CAAAiB,aAAa,CAACL,KAAK,EAAEC,SAAS,CAAC;;IAExC,IAAIT,WAAA,CAAAc,SAAS,CAACN,KAAK,CAAC,EAAE;MACpB,OAAOb,iBAAA,CAAAoB,eAAe,CAACP,KAAK,EAAEC,SAAS,CAAC;;IAE1C,IAAIN,iBAAA,CAAAa,eAAe,CAACR,KAAK,CAAC,EAAE;MAC1B,OAAOV,uBAAA,CAAAmB,qBAAqB,CAACT,KAAK,EAAEC,SAAS,CAAC;;IAEhD,IAAIP,YAAA,CAAAgB,UAAU,CAACV,KAAK,CAAC,EAAE;MACrB,OAAOX,kBAAA,CAAAsB,gBAAgB,CAACX,KAAK,EAAEC,SAAS,CAAC;;IAE3C,IAAIJ,sBAAA,CAAAe,oBAAoB,CAACZ,KAAK,CAAC,EAAE;MAC/B,OAAOF,4BAAA,CAAAe,0BAA0B,CAACb,KAAK,EAAEC,SAAS,CAAC;;;EAGvD,MAAML,wBAAA,CAAAkB,gCAAgC,CAACd,KAAK,CAAC;AAC/C;AAtBAe,OAAA,CAAAhB,SAAA,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}