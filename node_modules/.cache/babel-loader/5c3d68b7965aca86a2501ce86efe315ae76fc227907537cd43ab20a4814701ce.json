{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.switchScan = void 0;\nvar switchMap_1 = require(\"./switchMap\");\nvar lift_1 = require(\"../util/lift\");\nfunction switchScan(accumulator, seed) {\n  return lift_1.operate(function (source, subscriber) {\n    var state = seed;\n    switchMap_1.switchMap(function (value, index) {\n      return accumulator(state, value, index);\n    }, function (_, innerValue) {\n      return state = innerValue, innerValue;\n    })(source).subscribe(subscriber);\n    return function () {\n      state = null;\n    };\n  });\n}\nexports.switchScan = switchScan;","map":{"version":3,"names":["switchMap_1","require","lift_1","switchScan","accumulator","seed","operate","source","subscriber","state","switchMap","value","index","_","innerValue","subscribe","exports"],"sources":["/Users/anil/Documents/GitHub/armada-ai/node_modules/rxjs/src/internal/operators/switchScan.ts"],"sourcesContent":["import { ObservableInput, ObservedValueOf, OperatorFunction } from '../types';\nimport { switchMap } from './switchMap';\nimport { operate } from '../util/lift';\n\n// TODO: Generate a marble diagram for these docs.\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, emitting values\n * only from the most recently returned Observable.\n *\n * <span class=\"informal\">It's like {@link mergeScan}, but only the most recent\n * Observable returned by the accumulator is merged into the outer Observable.</span>\n *\n * @see {@link scan}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @return A function that returns an observable of the accumulated values.\n */\nexport function switchScan<T, R, O extends ObservableInput<any>>(\n  accumulator: (acc: R, value: T, index: number) => O,\n  seed: R\n): OperatorFunction<T, ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    // The state we will keep up to date to pass into our\n    // accumulator function at each new value from the source.\n    let state = seed;\n\n    // Use `switchMap` on our `source` to do the work of creating\n    // this operator. Note the backwards order here of `switchMap()(source)`\n    // to avoid needing to use `pipe` unnecessarily\n    switchMap(\n      // On each value from the source, call the accumulator with\n      // our previous state, the value and the index.\n      (value: T, index) => accumulator(state, value, index),\n      // Using the deprecated result selector here as a dirty trick\n      // to update our state with the flattened value.\n      (_, innerValue) => ((state = innerValue), innerValue)\n    )(source).subscribe(subscriber);\n\n    return () => {\n      // Release state on finalization\n      state = null!;\n    };\n  });\n}\n"],"mappings":";;;;;;AACA,IAAAA,WAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAqBA,SAAgBE,UAAUA,CACxBC,WAAmD,EACnDC,IAAO;EAEP,OAAOH,MAAA,CAAAI,OAAO,CAAC,UAACC,MAAM,EAAEC,UAAU;IAGhC,IAAIC,KAAK,GAAGJ,IAAI;IAKhBL,WAAA,CAAAU,SAAS,CAGP,UAACC,KAAQ,EAAEC,KAAK;MAAK,OAAAR,WAAW,CAACK,KAAK,EAAEE,KAAK,EAAEC,KAAK,CAAC;IAAhC,CAAgC,EAGrD,UAACC,CAAC,EAAEC,UAAU;MAAK,OAAEL,KAAK,GAAGK,UAAU,EAAGA,UAAU;IAAjC,CAAkC,CACtD,CAACP,MAAM,CAAC,CAACQ,SAAS,CAACP,UAAU,CAAC;IAE/B,OAAO;MAELC,KAAK,GAAG,IAAK;IACf,CAAC;EACH,CAAC,CAAC;AACJ;AA1BAO,OAAA,CAAAb,UAAA,GAAAA,UAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}