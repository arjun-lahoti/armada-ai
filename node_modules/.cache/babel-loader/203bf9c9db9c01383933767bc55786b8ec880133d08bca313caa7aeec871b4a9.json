{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buffer = void 0;\nvar lift_1 = require(\"../util/lift\");\nvar noop_1 = require(\"../util/noop\");\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\nvar innerFrom_1 = require(\"../observable/innerFrom\");\nfunction buffer(closingNotifier) {\n  return lift_1.operate(function (source, subscriber) {\n    var currentBuffer = [];\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      return currentBuffer.push(value);\n    }, function () {\n      subscriber.next(currentBuffer);\n      subscriber.complete();\n    }));\n    innerFrom_1.innerFrom(closingNotifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {\n      var b = currentBuffer;\n      currentBuffer = [];\n      subscriber.next(b);\n    }, noop_1.noop));\n    return function () {\n      currentBuffer = null;\n    };\n  });\n}\nexports.buffer = buffer;","map":{"version":3,"names":["lift_1","require","noop_1","OperatorSubscriber_1","innerFrom_1","buffer","closingNotifier","operate","source","subscriber","currentBuffer","subscribe","createOperatorSubscriber","value","push","next","complete","innerFrom","b","noop","exports"],"sources":["/Users/anil/Documents/GitHub/armada-ai/node_modules/rxjs/src/internal/operators/buffer.ts"],"sourcesContent":["import { OperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * `ObservableInput` (that internally gets converted to an Observable)\n * emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```ts\n * import { fromEvent, interval, buffer } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const intervalEvents = interval(1000);\n * const buffered = intervalEvents.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param closingNotifier An `ObservableInput` that signals the\n * buffer to be emitted on the output Observable.\n * @return A function that returns an Observable of buffers, which are arrays\n * of values.\n */\nexport function buffer<T>(closingNotifier: ObservableInput<any>): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    // The current buffered values.\n    let currentBuffer: T[] = [];\n\n    // Subscribe to our source.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => currentBuffer.push(value),\n        () => {\n          subscriber.next(currentBuffer);\n          subscriber.complete();\n        }\n      )\n    );\n\n    // Subscribe to the closing notifier.\n    innerFrom(closingNotifier).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        () => {\n          // Start a new buffer and emit the previous one.\n          const b = currentBuffer;\n          currentBuffer = [];\n          subscriber.next(b);\n        },\n        noop\n      )\n    );\n\n    return () => {\n      // Ensure buffered values are released on finalization.\n      currentBuffer = null!;\n    };\n  });\n}\n"],"mappings":";;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,oBAAA,GAAAF,OAAA;AACA,IAAAG,WAAA,GAAAH,OAAA;AAwCA,SAAgBI,MAAMA,CAAIC,eAAqC;EAC7D,OAAON,MAAA,CAAAO,OAAO,CAAC,UAACC,MAAM,EAAEC,UAAU;IAEhC,IAAIC,aAAa,GAAQ,EAAE;IAG3BF,MAAM,CAACG,SAAS,CACdR,oBAAA,CAAAS,wBAAwB,CACtBH,UAAU,EACV,UAACI,KAAK;MAAK,OAAAH,aAAa,CAACI,IAAI,CAACD,KAAK,CAAC;IAAzB,CAAyB,EACpC;MACEJ,UAAU,CAACM,IAAI,CAACL,aAAa,CAAC;MAC9BD,UAAU,CAACO,QAAQ,EAAE;IACvB,CAAC,CACF,CACF;IAGDZ,WAAA,CAAAa,SAAS,CAACX,eAAe,CAAC,CAACK,SAAS,CAClCR,oBAAA,CAAAS,wBAAwB,CACtBH,UAAU,EACV;MAEE,IAAMS,CAAC,GAAGR,aAAa;MACvBA,aAAa,GAAG,EAAE;MAClBD,UAAU,CAACM,IAAI,CAACG,CAAC,CAAC;IACpB,CAAC,EACDhB,MAAA,CAAAiB,IAAI,CACL,CACF;IAED,OAAO;MAELT,aAAa,GAAG,IAAK;IACvB,CAAC;EACH,CAAC,CAAC;AACJ;AApCAU,OAAA,CAAAf,MAAA,GAAAA,MAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}