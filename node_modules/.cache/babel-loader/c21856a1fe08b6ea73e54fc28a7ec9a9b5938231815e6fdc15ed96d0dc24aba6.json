{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zip = void 0;\nvar Observable_1 = require(\"../Observable\");\nvar innerFrom_1 = require(\"./innerFrom\");\nvar argsOrArgArray_1 = require(\"../util/argsOrArgArray\");\nvar empty_1 = require(\"./empty\");\nvar OperatorSubscriber_1 = require(\"../operators/OperatorSubscriber\");\nvar args_1 = require(\"../util/args\");\nfunction zip() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var resultSelector = args_1.popResultSelector(args);\n  var sources = argsOrArgArray_1.argsOrArgArray(args);\n  return sources.length ? new Observable_1.Observable(function (subscriber) {\n    var buffers = sources.map(function () {\n      return [];\n    });\n    var completed = sources.map(function () {\n      return false;\n    });\n    subscriber.add(function () {\n      buffers = completed = null;\n    });\n    var _loop_1 = function (sourceIndex) {\n      innerFrom_1.innerFrom(sources[sourceIndex]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n        buffers[sourceIndex].push(value);\n        if (buffers.every(function (buffer) {\n          return buffer.length;\n        })) {\n          var result = buffers.map(function (buffer) {\n            return buffer.shift();\n          });\n          subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);\n          if (buffers.some(function (buffer, i) {\n            return !buffer.length && completed[i];\n          })) {\n            subscriber.complete();\n          }\n        }\n      }, function () {\n        completed[sourceIndex] = true;\n        !buffers[sourceIndex].length && subscriber.complete();\n      }));\n    };\n    for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n      _loop_1(sourceIndex);\n    }\n    return function () {\n      buffers = completed = null;\n    };\n  }) : empty_1.EMPTY;\n}\nexports.zip = zip;","map":{"version":3,"names":["Observable_1","require","innerFrom_1","argsOrArgArray_1","empty_1","OperatorSubscriber_1","args_1","zip","args","_i","arguments","length","resultSelector","popResultSelector","sources","argsOrArgArray","Observable","subscriber","buffers","map","completed","add","sourceIndex","innerFrom","subscribe","createOperatorSubscriber","value","push","every","buffer","result","shift","next","apply","__spreadArray","__read","some","i","complete","closed","EMPTY","exports"],"sources":["/Users/anil/Documents/GitHub/armada-ai/node_modules/rxjs/src/internal/observable/zip.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInputTuple } from '../types';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\n\nexport function zip<A extends readonly unknown[]>(sources: [...ObservableInputTuple<A>]): Observable<A>;\nexport function zip<A extends readonly unknown[], R>(\n  sources: [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\nexport function zip<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\nexport function zip<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the last parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * ## Example\n *\n * Combine age and name from different sources\n *\n * ```ts\n * import { of, zip, map } from 'rxjs';\n *\n * const age$ = of(27, 25, 29);\n * const name$ = of('Foo', 'Bar', 'Beer');\n * const isDev$ = of(true, true, false);\n *\n * zip(age$, name$, isDev$).pipe(\n *   map(([age, name, isDev]) => ({ age, name, isDev }))\n * )\n * .subscribe(x => console.log(x));\n *\n * // Outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n * ```\n *\n * @param sources\n * @return {Observable<R>}\n */\nexport function zip(...args: unknown[]): Observable<unknown> {\n  const resultSelector = popResultSelector(args);\n\n  const sources = argsOrArgArray(args) as Observable<unknown>[];\n\n  return sources.length\n    ? new Observable<unknown[]>((subscriber) => {\n        // A collection of buffers of values from each source.\n        // Keyed by the same index with which the sources were passed in.\n        let buffers: unknown[][] = sources.map(() => []);\n\n        // An array of flags of whether or not the sources have completed.\n        // This is used to check to see if we should complete the result.\n        // Keyed by the same index with which the sources were passed in.\n        let completed = sources.map(() => false);\n\n        // When everything is done, release the arrays above.\n        subscriber.add(() => {\n          buffers = completed = null!;\n        });\n\n        // Loop over our sources and subscribe to each one. The index `i` is\n        // especially important here, because we use it in closures below to\n        // access the related buffers and completion properties\n        for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n          innerFrom(sources[sourceIndex]).subscribe(\n            createOperatorSubscriber(\n              subscriber,\n              (value) => {\n                buffers[sourceIndex].push(value);\n                // if every buffer has at least one value in it, then we\n                // can shift out the oldest value from each buffer and emit\n                // them as an array.\n                if (buffers.every((buffer) => buffer.length)) {\n                  const result: any = buffers.map((buffer) => buffer.shift()!);\n                  // Emit the array. If theres' a result selector, use that.\n                  subscriber.next(resultSelector ? resultSelector(...result) : result);\n                  // If any one of the sources is both complete and has an empty buffer\n                  // then we complete the result. This is because we cannot possibly have\n                  // any more values to zip together.\n                  if (buffers.some((buffer, i) => !buffer.length && completed[i])) {\n                    subscriber.complete();\n                  }\n                }\n              },\n              () => {\n                // This source completed. Mark it as complete so we can check it later\n                // if we have to.\n                completed[sourceIndex] = true;\n                // But, if this complete source has nothing in its buffer, then we\n                // can complete the result, because we can't possibly have any more\n                // values from this to zip together with the other values.\n                !buffers[sourceIndex].length && subscriber.complete();\n              }\n            )\n          );\n        }\n\n        // When everything is done, release the arrays above.\n        return () => {\n          buffers = completed = null!;\n        };\n      })\n    : EMPTY;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAEA,IAAAC,WAAA,GAAAD,OAAA;AACA,IAAAE,gBAAA,GAAAF,OAAA;AACA,IAAAG,OAAA,GAAAH,OAAA;AACA,IAAAI,oBAAA,GAAAJ,OAAA;AACA,IAAAK,MAAA,GAAAL,OAAA;AA4CA,SAAgBM,GAAGA,CAAA;EAAC,IAAAC,IAAA;OAAA,IAAAC,EAAA,IAAkB,EAAlBA,EAAA,GAAAC,SAAA,CAAAC,MAAkB,EAAlBF,EAAA,EAAkB;IAAlBD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EAClB,IAAMG,cAAc,GAAGN,MAAA,CAAAO,iBAAiB,CAACL,IAAI,CAAC;EAE9C,IAAMM,OAAO,GAAGX,gBAAA,CAAAY,cAAc,CAACP,IAAI,CAA0B;EAE7D,OAAOM,OAAO,CAACH,MAAM,GACjB,IAAIX,YAAA,CAAAgB,UAAU,CAAY,UAACC,UAAU;IAGnC,IAAIC,OAAO,GAAgBJ,OAAO,CAACK,GAAG,CAAC;MAAM,SAAE;IAAF,CAAE,CAAC;IAKhD,IAAIC,SAAS,GAAGN,OAAO,CAACK,GAAG,CAAC;MAAM,YAAK;IAAL,CAAK,CAAC;IAGxCF,UAAU,CAACI,GAAG,CAAC;MACbH,OAAO,GAAGE,SAAS,GAAG,IAAK;IAC7B,CAAC,CAAC;4BAKOE,WAAW;MAClBpB,WAAA,CAAAqB,SAAS,CAACT,OAAO,CAACQ,WAAW,CAAC,CAAC,CAACE,SAAS,CACvCnB,oBAAA,CAAAoB,wBAAwB,CACtBR,UAAU,EACV,UAACS,KAAK;QACJR,OAAO,CAACI,WAAW,CAAC,CAACK,IAAI,CAACD,KAAK,CAAC;QAIhC,IAAIR,OAAO,CAACU,KAAK,CAAC,UAACC,MAAM;UAAK,OAAAA,MAAM,CAAClB,MAAM;QAAb,CAAa,CAAC,EAAE;UAC5C,IAAMmB,MAAM,GAAQZ,OAAO,CAACC,GAAG,CAAC,UAACU,MAAM;YAAK,OAAAA,MAAM,CAACE,KAAK,EAAG;UAAf,CAAe,CAAC;UAE5Dd,UAAU,CAACe,IAAI,CAACpB,cAAc,GAAGA,cAAc,CAAAqB,KAAA,SAAAC,aAAA,KAAAC,MAAA,CAAIL,MAAM,MAAIA,MAAM,CAAC;UAIpE,IAAIZ,OAAO,CAACkB,IAAI,CAAC,UAACP,MAAM,EAAEQ,CAAC;YAAK,QAACR,MAAM,CAAClB,MAAM,IAAIS,SAAS,CAACiB,CAAC,CAAC;UAA9B,CAA8B,CAAC,EAAE;YAC/DpB,UAAU,CAACqB,QAAQ,EAAE;;;MAG3B,CAAC,EACD;QAGElB,SAAS,CAACE,WAAW,CAAC,GAAG,IAAI;QAI7B,CAACJ,OAAO,CAACI,WAAW,CAAC,CAACX,MAAM,IAAIM,UAAU,CAACqB,QAAQ,EAAE;MACvD,CAAC,CACF,CACF;;IA/BH,KAAK,IAAIhB,WAAW,GAAG,CAAC,EAAE,CAACL,UAAU,CAACsB,MAAM,IAAIjB,WAAW,GAAGR,OAAO,CAACH,MAAM,EAAEW,WAAW,EAAE;cAAlFA,WAAW;;IAmCpB,OAAO;MACLJ,OAAO,GAAGE,SAAS,GAAG,IAAK;IAC7B,CAAC;EACH,CAAC,CAAC,GACFhB,OAAA,CAAAoC,KAAK;AACX;AAhEAC,OAAA,CAAAlC,GAAA,GAAAA,GAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}