{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectable = void 0;\nvar Subject_1 = require(\"../Subject\");\nvar Observable_1 = require(\"../Observable\");\nvar defer_1 = require(\"./defer\");\nvar DEFAULT_CONFIG = {\n  connector: function () {\n    return new Subject_1.Subject();\n  },\n  resetOnDisconnect: true\n};\nfunction connectable(source, config) {\n  if (config === void 0) {\n    config = DEFAULT_CONFIG;\n  }\n  var connection = null;\n  var connector = config.connector,\n    _a = config.resetOnDisconnect,\n    resetOnDisconnect = _a === void 0 ? true : _a;\n  var subject = connector();\n  var result = new Observable_1.Observable(function (subscriber) {\n    return subject.subscribe(subscriber);\n  });\n  result.connect = function () {\n    if (!connection || connection.closed) {\n      connection = defer_1.defer(function () {\n        return source;\n      }).subscribe(subject);\n      if (resetOnDisconnect) {\n        connection.add(function () {\n          return subject = connector();\n        });\n      }\n    }\n    return connection;\n  };\n  return result;\n}\nexports.connectable = connectable;","map":{"version":3,"names":["Subject_1","require","Observable_1","defer_1","DEFAULT_CONFIG","connector","Subject","resetOnDisconnect","connectable","source","config","connection","_a","subject","result","Observable","subscriber","subscribe","connect","closed","defer","add","exports"],"sources":["/Users/anil/Documents/GitHub/1appAI/node_modules/rxjs/src/internal/observable/connectable.ts"],"sourcesContent":["import { Connectable, ObservableInput, SubjectLike } from '../types';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { defer } from './defer';\n\nexport interface ConnectableConfig<T> {\n  /**\n   * A factory function used to create the Subject through which the source\n   * is multicast. By default this creates a {@link Subject}.\n   */\n  connector: () => SubjectLike<T>;\n  /**\n   * If true, the resulting observable will reset internal state upon disconnection\n   * and return to a \"cold\" state. This allows the resulting observable to be\n   * reconnected.\n   * If false, upon disconnection, the connecting subject will remain the\n   * connecting subject, meaning the resulting observable will not go \"cold\" again,\n   * and subsequent repeats or resubscriptions will resubscribe to that same subject.\n   */\n  resetOnDisconnect?: boolean;\n}\n\n/**\n * The default configuration for `connectable`.\n */\nconst DEFAULT_CONFIG: ConnectableConfig<unknown> = {\n  connector: () => new Subject<unknown>(),\n  resetOnDisconnect: true,\n};\n\n/**\n * Creates an observable that multicasts once `connect()` is called on it.\n *\n * @param source The observable source to make connectable.\n * @param config The configuration object for `connectable`.\n * @returns A \"connectable\" observable, that has a `connect()` method, that you must call to\n * connect the source to all consumers through the subject provided as the connector.\n */\nexport function connectable<T>(source: ObservableInput<T>, config: ConnectableConfig<T> = DEFAULT_CONFIG): Connectable<T> {\n  // The subscription representing the connection.\n  let connection: Subscription | null = null;\n  const { connector, resetOnDisconnect = true } = config;\n  let subject = connector();\n\n  const result: any = new Observable<T>((subscriber) => {\n    return subject.subscribe(subscriber);\n  });\n\n  // Define the `connect` function. This is what users must call\n  // in order to \"connect\" the source to the subject that is\n  // multicasting it.\n  result.connect = () => {\n    if (!connection || connection.closed) {\n      connection = defer(() => source).subscribe(subject);\n      if (resetOnDisconnect) {\n        connection.add(() => (subject = connector()));\n      }\n    }\n    return connection;\n  };\n\n  return result;\n}\n"],"mappings":";;;;;;AACA,IAAAA,SAAA,GAAAC,OAAA;AAEA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AAsBA,IAAMG,cAAc,GAA+B;EACjDC,SAAS,EAAE,SAAAA,CAAA;IAAM,WAAIL,SAAA,CAAAM,OAAO,EAAW;EAAtB,CAAsB;EACvCC,iBAAiB,EAAE;CACpB;AAUD,SAAgBC,WAAWA,CAAIC,MAA0B,EAAEC,MAA6C;EAA7C,IAAAA,MAAA;IAAAA,MAAA,GAAAN,cAA6C;EAAA;EAEtG,IAAIO,UAAU,GAAwB,IAAI;EAClC,IAAAN,SAAS,GAA+BK,MAAM,CAAAL,SAArC;IAAEO,EAAA,GAA6BF,MAAM,CAAAH,iBAAX;IAAxBA,iBAAiB,GAAAK,EAAA,cAAG,IAAI,GAAAA,EAAA;EAC3C,IAAIC,OAAO,GAAGR,SAAS,EAAE;EAEzB,IAAMS,MAAM,GAAQ,IAAIZ,YAAA,CAAAa,UAAU,CAAI,UAACC,UAAU;IAC/C,OAAOH,OAAO,CAACI,SAAS,CAACD,UAAU,CAAC;EACtC,CAAC,CAAC;EAKFF,MAAM,CAACI,OAAO,GAAG;IACf,IAAI,CAACP,UAAU,IAAIA,UAAU,CAACQ,MAAM,EAAE;MACpCR,UAAU,GAAGR,OAAA,CAAAiB,KAAK,CAAC;QAAM,OAAAX,MAAM;MAAN,CAAM,CAAC,CAACQ,SAAS,CAACJ,OAAO,CAAC;MACnD,IAAIN,iBAAiB,EAAE;QACrBI,UAAU,CAACU,GAAG,CAAC;UAAM,OAACR,OAAO,GAAGR,SAAS,EAAE;QAAtB,CAAuB,CAAC;;;IAGjD,OAAOM,UAAU;EACnB,CAAC;EAED,OAAOG,MAAM;AACf;AAxBAQ,OAAA,CAAAd,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}