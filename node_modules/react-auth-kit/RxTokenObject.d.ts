/**
 *
 * @author Arkadip Bhattacharya <hi@arkadip.dev>
 * @fileoverview Token Object Engine
 * @copyright Arkadip Bhattacharya 2020
 *
 */
import { Observable } from 'rxjs';
import { AuthKitStateInterface, AuthKitSetState } from './types';
/**
 * @class TokenObject
 *
 * Stores and retrieve Token
 */
declare class TokenObject<T> {
    private readonly authStorageName;
    private readonly stateStorageName;
    private readonly cookieDomain?;
    private readonly cookieSecure?;
    private readonly authStorageTypeName;
    private readonly authStorageType;
    private readonly refreshTokenName;
    private readonly isUsingRefreshToken;
    private authValue;
    private authSubject;
    /**
     * TokenObject - Stores, retrieve and process tokens
     *
     * @param authStorageName - Name of the Token,
     * which will store the Authorization Token
     *
     * @param authStorageType - Type of the auth Storage, `
     * cookie` or `localstorage`
     *
     * @param refreshTokenName - Name of the refresh Token,
     * if `undefined`, then no refreshToken feature is using
     *
     * @param cookieDomain - domain name for the Cookies,
     * only applicable when `authStorageType` is `cookie`
     *
     * @param cookieSecure - cookies are secure or not,
     * only applicable when `authStorageType` is `cookie`
     *
     * @constructor
     */
    constructor(authStorageName: string, authStorageType: 'cookie' | 'localstorage', refreshTokenName: string | null, cookieDomain?: string, cookieSecure?: boolean);
    subscribe: (next: (value: AuthKitStateInterface<T>) => void, error?: ((err: any) => void) | undefined) => void;
    observe: () => Observable<AuthKitStateInterface<T>>;
    set: (data: AuthKitSetState<T>) => void;
    get value(): AuthKitStateInterface<T>;
    /**
     * Get the Initial Tokens and states
     * Called externally in `AuthProvider`
     * when the Application is bootstrapping or refreshed
     *
     * If the `authStorageType` is `cookie`,
     * get information from `initialCookieToken()` function
     *
     * If the `authTokenType` is `localStorage`
     * get information from `initialLSToken()` function
     *
     * @returns AuthKitStateInterface
     */
    private initialToken_;
    /**
     * Get the Initial Token from Cookies
     * Called internally by `initialToken` method
     *
     * If the `authStorageType` is `cookie`
     * then this function is called
     * And returns the Tokens and states Stored in all 4 cookies
     *
     * @returns AuthKitStateInterface
     */
    private initialCookieToken_;
    /**
     * Get the Initial Token from LocalStorage
     * Called internally by `initialToken` method
     *
     * If the `authStorageType` is `localstorage`
     * then this function is called
     * And returns the Tokens and states Stored in all 4 cookies
     *
     * @returns AuthKitStateInterface
     */
    private initialLSToken_;
    /**
     * Check if the Initial token is valid or not,
     * Called Internally by `initialCookieToken_()` and `initialLSToken_()`
     *
     * If the tokens are valid,
     * then it response TokenObject with auth Information
     * Else it response TokenObject with all null
     *
     * @param authToken
     * @param authTokenType
     * @param authTokenTime
     * @param stateCookie
     * @param refreshToken
     * @param refreshTokenTime
     *
     * @returns AuthKitStateInterface
     *
     */
    private checkTokenExist_;
    private parseJwt_;
    private getExpireDateTime_;
    /**
     * Sync Auth Tokens on time of login and logout
     *
     * Set the New Cookies or new Localstorage on login
     * Or Remove the old Cookies or old Localstorage on logout
     *
     * @param authState
     */
    syncTokens: (authState: AuthKitStateInterface<T>) => void;
    private setAuthToken;
    private setRefreshToken;
    /**
     * Remove Tokens on time of Logout
     */
    private removeAllToken;
    /**
     * Remove Token from Cookies
     */
    private removeAllCookieToken_;
    /**
     * Remove Token from LocalStorage
     */
    private removeAllLSToken_;
    /**
     * Remove Tokens on time of Logout
     */
    private removeAuth;
    /**
     * Remove Token from Cookies
     */
    private removeAuthCookie;
    /**
     * Remove Token from LocalStorage
     */
    private removeAuthToken;
    /**
     * Remove Tokens on time of Logout
     */
    private removeRefresh;
    /**
     * Remove Token from Cookies
     */
    private removeRefreshCookie;
    /**
     * Remove Token from LocalStorage
     */
    private removeRefreshToken;
}
export default TokenObject;
